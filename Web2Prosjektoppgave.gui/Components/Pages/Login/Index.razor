@page "/Login"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components
@using Web2Prosjektoppgave.gui.Components.Layout
@using Web2Prosjektoppgave.shared.ViewModels.Login

@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Login</PageTitle>
<h1 class="text-center">Login</h1>

<div class="container mt-4 text-center">
    <EditForm FormName="login" Model="@loginForm" OnValidSubmit="@Login">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="loginForm.UserName"/>
            <ValidationMessage class="text-danger" For="@(() => loginForm.UserName)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" class="form-control" @bind-Value="loginForm.Password"/>
            <ValidationMessage class="text-danger" For="@(() => loginForm.Password)"></ValidationMessage>
        </div>
        <div class="d-flex justify-content-end">
            <button type="submit" class="btn btn-primary mt-2">Login</button>
        </div>
        <div class="form-check d-flex justify-content-end align-items-center m-1">
            <label class="m-1" for="remember">Remember me:</label>
            <InputCheckbox id="remember" class="m-1" @bind-Value="loginForm.RememberMe" />
        </div>
        <div class="form-check d-flex justify-content-end align-items-center m-1">
            <label class="m-1" for="remember">No existing account?:</label>
            <a class="m-1" href="/User/Create">Create new user instead</a>
        </div>
        
    </EditForm>
</div>

@code {
    private bool getError;
    private bool shouldRender;
    [SupplyParameterFromForm]
    public LoginView loginForm { get; set; }

    protected override bool ShouldRender() => shouldRender;

    private async Task Login()
    {
        var request = new HttpRequestMessage(HttpMethod.Post,
            "https://localhost:7078/Auth/Login");
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        request.Content = new StringContent(
            JsonSerializer.Serialize(loginForm), Encoding.UTF8, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var tokenString = await response.Content.ReadAsStringAsync();

            await JsRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", tokenString);

            
            // Redirect to home after successful login
            NavigationManager.NavigateTo("/");
        }
        else
        {
            getError = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        shouldRender = true;
        // "Null-coalescing assignment operator": returns the left hand existing variable unless it is null,
        // in which case it it evaluates and returns the right hand result.
        loginForm ??= new();
    }
}

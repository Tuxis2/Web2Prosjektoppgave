@page "/Blog/{BlogId}/BlogPost/{BlogPostId}/Comment/Edit"
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components
@using Web2Prosjektoppgave.shared.ViewModels.BlogPost
@using Web2Prosjektoppgave.shared.ViewModels.Comment

@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager

<PageTitle>Comment</PageTitle>
<h3 class="text-center">Make a comment</h3>

<div class="container">

    <div class="card">
        <h4 class="text-center flex-grow-1">@commentEditForm?.BlogPost?.Title</h4>
        <p class="text-end m-4">@commentEditForm?.BlogPost?.Content</p>
        @if (@commentEditForm?.BlogPost?.CreatedAt != @commentEditForm?.BlogPost?.ModifiedAt)
        {
            <div class="text-end m-2">
                <p class="m-0">Created by(edited): @commentEditForm?.BlogPost?.CreatedByUserName on @commentEditForm?.BlogPost?.CreatedAt.ToString("dd/MM/yyyy")</p>
                <p class="m-0">Last edit on @commentEditForm?.BlogPost?.ModifiedAt.ToString("dd/MM/yyyy") by @commentEditForm?.BlogPost?.ModifiedByUserName</p>
            </div>
        }
        else
        {
            <p class="text-end m-2">Posted by: @commentEditForm?.BlogPost?.CreatedByUserName on @commentEditForm?.BlogPost?.CreatedAt.ToString("dd/MM/yyyy")</p>
        }
    </div>
    <EditForm FormName="createPostComment" Model="@commentEditForm" OnValidSubmit="@CreatePostComment">
        <DataAnnotationsValidator />
        <div class="card">
            <input id="BlogId" type="hidden" @bind="commentEditForm.BlogId" />
            <input id="PostId" type="hidden" @bind="commentEditForm.BlogPostId" />

            <div>
                <label for="content">Blog Post:</label>
                <InputTextArea rows="10" id="content" class="form-control" @bind-Value="@commentEditForm.Content" />
                <ValidationMessage class="text-danger" For="@((() => commentEditForm.Content))"></ValidationMessage>
            </div>
            <div class="d-flex justify-content-between m-3">
                <button type="button" class="btn btn-secondary" onclick="goBack()">Go Back</button>
                <button type="submit" class="btn btn-primary">Make Comment</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public string BlogId { get; set; }
    [Parameter]
    public string BlogPostId { get; set; }
    private bool getError;
    private bool shouldRender;
    [SupplyParameterFromForm]
    public CommentEditForm commentEditForm { get; set; }

    protected override bool ShouldRender() => shouldRender;

    private async Task CreatePostComment()
    {
        var request = new HttpRequestMessage(HttpMethod.Put,
            "https://localhost:7078/Comment");
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        request.Content = new StringContent(
            JsonSerializer.Serialize(commentEditForm), Encoding.UTF8, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions()
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                };

            using var responseStream = await response.Content.ReadAsStreamAsync();
        }
        else
        {
            getError = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        commentEditForm = new CommentEditForm()
            {
                BlogPost = new BlogPostItemView()
            };

        BlogPostItemView? blogPost = await GetBlogPost();

        commentEditForm = new CommentEditForm()
            {
                BlogId = int.Parse(BlogId),
                BlogPostId = int.Parse(BlogPostId),
                BlogPost = blogPost
            };

        shouldRender = true;
    }

    private async Task<BlogPostItemView?> GetBlogPost()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            $"https://localhost:7078/BlogPost/{BlogPostId}");
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        request.Content = new StringContent(
            JsonSerializer.Serialize(commentEditForm), Encoding.UTF8, "application/json");

        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);

        BlogPostItemView? blogPost = null;
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions()
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                };

            using var responseStream = await response.Content.ReadAsStreamAsync();
            blogPost = await JsonSerializer.DeserializeAsync
                <BlogPostItemView>(responseStream, options);
        }
        else
        {
            getError = true;
        }

        return blogPost;
    }
}
